{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "tsc --build"
        },
        {
          "exec": "tsup --config=\"tsup.config.json\""
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "pnpm --silent dlx projen default",
          "cwd": "../.."
        }
      ]
    },
    "dev": {
      "name": "dev",
      "description": "An Oclif CLI for development mode.",
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "bk"
      },
      "steps": [
        {
          "exec": "tsx --tsconfig tsconfig.json bin/run.js",
          "receiveArgs": true
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "pnpm i --no-frozen-lockfile"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "pnpm i --frozen-lockfile"
        }
      ]
    },
    "oclif:readme": {
      "name": "oclif:readme",
      "description": "Generates a README.md file for the CLI.",
      "steps": [
        {
          "exec": "shx mv README.md README.md.bak"
        },
        {
          "exec": "shx cp CLI.template.md README.md"
        },
        {
          "exec": "oclif readme"
        },
        {
          "exec": "shx mv README.md CLI.md"
        },
        {
          "exec": "shx mv README.md.bak README.md"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "publint run --strict"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "oclif:readme"
        }
      ]
    },
    "postpack": {
      "name": "postpack",
      "steps": [
        {
          "exec": "mv -f package.json.original package.json"
        }
      ]
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "prepack": {
      "name": "prepack",
      "steps": [
        {
          "exec": "cp package.json package.json.original"
        },
        {
          "exec": "clear-package-json package.json -o package.json --fields \"//\""
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "spawn": "eslint"
        },
        {
          "exec": "vitest run --update"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run Vitest in watch mode",
      "steps": [
        {
          "exec": "vitest watch"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "tsc --build -w"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(pnpm -c exec \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"pnpm --silent dlx projen\"."
}
